字符函数与字符串函数
#include <string.h>
#include <stdio.h>
strlen
int main()
{
    //char ch = 'a';
   //"abcdef";//c语言没有字符串类型
   char arr[ ] = "abcdef";
   //char arr[ ] = { 'a', 'b', 'c', 'd', 'e', 'f' };//随机值
   //char arr[10] = { 'a', 'b', 'c', 'd', 'e', 'f' };//6
   int len = strlen(arr);//string length
   printf("%d\n", len);
   return 0:
}

int main()
{
   if ((int)strlen("abc") - (int)strlen('qwerty") > 0)
   {
          printf(">\n");
   }
   else
   {
          printf("<=\n");
   }
   return 0;
}

#include <assert.h>
//1.计数器的方法
size_t my_strlen(const char* str)
{
    int count = 0;
    assert(str != NULL);
    if (*str != '\0')
    {
        count++;
        str++;
    }
    return count;
}
//2.递归的方法
//3.指针减指针的方法
int main()
{
    char arr[ ] = "abcdef";
    int len = my_strlen(arr);
    printf("%d\n", len);
    return 0;
}

strcpy
int main()
{
    //char arr1[20] = { 0 };
    char arr1[20] = "XXXXXXXXX";
    char arr2[ ] = "abcdef";
    //char arr2[ ] = { 'a', 'b', 'c' };//程序崩溃
    //char arr2[10] = {'a', 'b', 'c'};//正常运行不完全初始化，剩下7个默认为“\0”
    strcpy(arr1, arr2);//会让“\0”把X覆盖
    printf("%s\n", arr1);
    return 0;
}

int main()
{
    char arr1[4] = "x";
    char arr2[ ] = "abcdef";
    strcpy(arr1,arr2);//arr1不够空间存放，栈空间被破坏，但可以成功运行
    return 0;
}

int main()
{
    //char arr1[4] = "x";
   char* arr1 = "qwertyuiop";//arr1指向的是常量字符串，常量是不可修改的
   char arr2[ ] = "abcdef";
   strcpy(arr1, arr2);//程序报错
   return 0;
}
char* my_strcpy(char*dest, const char*src)
{
    assert(src && dest)
    char* ret = dest;
    while{*dest++ = *src++)
    {
               ;
    }
    return ret;
}

int main()
{
    char arr1[20] = { 0 };
    char* arr2 = "hello bit";

    printf("%s\n", my_strcpy(arr1, arr2));
    return 0;
}

strcat
char* my_strcat(char* dest, char* src)
{
    assert(dest && src)
    char* ret = dest;
    //找目标空间中的'\0'
    while(*dest)
    {
          dest++:
    }
    //拷贝
    while(*dest++ = *src++)
    {
             ;
    }
    return ret;
}

int main()
{
    char arr1[20] = "hello";//必须要有'\0'
    char arr2[ ] = "bit";
    my_strcat( arr1, arr2 };//自己给自己追加会覆盖'\0'，程序崩溃

    printf("%s\n",arr1);

    return 0;
}

strcmp
int my_strcmp(const char* s1,const char* s2)
{
      assert(s1 && s2)
      while(*s1 == *s2)
      {
            if( *s1 == '\0' )
            {
                  return 0;//相等
            }
             s1++;
             s2++;
      }
      return *s1 - *s2;
}

int main()
{
    char arr1[ ] = "abcdef";
    char arr2[ ] = "abq";
    //q大于c，所以arr2大于arr1
    int ret = my_strcmp(arr1, arr2);
    //strcmp函数比较地不是字符串的长度！！！！
    //而是比较字符串中对应位置上的字符的大小，如果相同，就比较下一对儿，直到不同或都遇到\0
    //
    if ( ret > 0)
    {
          printf(">");
    }
    else if ( ret == 0)
    {
          printf("=");
    }
    else
    {
          printf("=");
    }
    return 0;
}

strncpy
int main()
{
    char arr1[ ] = "abcdef";
    char arr2[ ] = "qwertyuiop";

    strncpy(arr1, arr2, 3);//qwedef,"3"表示拷贝的数目
    
    printf("%s\n", arr1);
    return 0;
}

int main()
{
    char arr1[ ] = "abcdef";
    char arr2[ ] = "qwe";

    strncpy(arr1,arr2, 5);"abc\0\0f",不够的会用\0来填补

    printf("%s\n",arr1);
    return 0;
}

strncat
int main()
{
    char arr1[20] = "abcdef";
    char arr2[ ] = "qwertyuiop";
    strncat( arr1, arr2, 5);//abcdefqwert(实际上算上‘\0’追加了6个字符)
    printf("%s\n", arr1);

    return 0;
}

int main()
{
    char arr1[20] = "abcdef\0XXXXXXXX";
    char arr2[ ] = "qwe";
    strncat(arr1, arr2, 5);//实际上加上“\0”最多只追加4个
    printf("%s\n", arr1);
    return 0;
}

strncmp
int main()
{
    char arr1[ ] = "abcdef";
    char arr2[ ] = "abcdq";
    int ret = strncmp(arr1, arr2, 4);

    printf("%d\n", ret);//0

    return 0;
}

//错误的字符串比较示范
int main()
{
    char arr1[ ] = "abcdef";
    char arr2[ ] = "abc‘;
    if (arr1 < arr2)  //比较的是地址
    {
        ；
    }
    if’ ( "abc" < "abcdef" )//表示各自的"a"的地址
   {
       ；
   }
   return 0;
}

strstr
char* my_strstr(char* str1, char* str2)
{
    assert(str1 && str2)

    const char* s1 = str1;
    const char* s2 = str2;

    const char* cur = str1;
    while(*cur)
    {
            s1 = cur;
            s2 = str2;
            while(*s1 && *s2 && (*s1 == *s2))
            {
                    s1++;
                    s2++;
            }
            if(*s2 ==  '\0')
           {
                  return (char*)cur;
           }
            cur++;
    }
    return NULL;//找不到
}

int main()
{
    char arr1[ ] = "abcdeqabcdef";
    char arr2[ ] = "cdef";
    char* ret = my_strstr(arr1, arr2);
    if(NULL == ret)
    {
           printf("找不到子串\n");
    }
    else
    {
           printf("%s\n", ret);
    }
    return 0;
}

Practice1:
5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果：

A选手说：B第二，我第三；

B选手说：我第二，E第四；

C选手说：我第一，D第二；

D选手说：C最后，我第三；

E选手说：我第四，A第一；

比赛结束后，每位选手都说对了一半，请编程确定比赛的名次。
#include <stdio.h>
#include <math.h>
int main()
{
  int a,b,c,d,e;
  for(a=1;a<=5;a++)
  {
    for(b=1;b<=5;b++)
    {
        for(c=1;c<=5;c++)
        {
            for(d=1;d<=5;d++)
            {
                for(e=1;e<=5;e++)
                {
                    if(((b==2)+(a==3)==1) && ((b==2)+(e==4)==1) && ((c==1)+(d==2)==1) &&
                    ((c==5)+(d==3)==1) && ((e==4)+(a==1)==1))
                    if(a*b*c*d*e==120)
                    printf("a=%d,b=%d,c=%d,d=%d,e=%d",a,b,c,d,e);
                }
            }
        }
    }
  }
  return 0;
}

Practice2:
用递归实现倒序字符串
void reverse_string(char* string,int left,int right)
{
    int tmp;
    if(left>=right)
    return 0;
    else
    tmp = string[left];
    string[left] = string[right];
    string[right] = tmp;
    return reverse_string(string,left + 1,right - 1);
}
int main()
{
    char string[10];
    scanf("%s",&string);
    int sz = sizeof(string)/sizeof(string[0]);
    int left = 0;
    int right = sz- 1;
    reverse_string(string,left,right);
    printf("%s",string);
    return 0;
}
Practice3:
旋转字符串
#include <stdio.h>
#include <math.h>
void reverse(int arr[],int left,int right)
{
    while(left<right)
    {
    int tmp = arr[left];
    arr[left] = arr[right];
    arr[right] = tmp;
    left++;
    right--;
    }
}

void leftrotate(int arr[],int k,int sz)
{
    k%=sz;
    reverse(arr,0,k-1);
    reverse(arr,k,sz-1);
    reverse(arr,0,sz-1);
}

int main()
{
    int k;
    int i;
    printf("请输入需要逆序的字符数量：");
    int arr[9] = {0,1,2,3,4,5,6,7,8};
    scanf("%d",&k);
    int sz = sizeof(arr)/sizeof(arr[0]);
    leftrotate(arr,k,sz);
    for(i=0;i<sz;i++)
    {
        printf("%d",arr[i]);
    }
    return 0;
}

Practice4:
写一个函数，判断一个字符串是否为另外一个字符串旋转之后的字符串
int findRound(const char * src, char * find)
{
	char tmp[256] = { 0 }; //用一个辅助空间将原字符串做成两倍原字符串
	strcpy(tmp, src); //先拷贝一遍
	strcat(tmp, src); //再连接一遍
	return strstr(tmp, find) != NULL; //看看找不找得到
}

Pracyice5：
查找二进制位中有几个1（优化算法）
int binary_check(int num)
{
	int count = 0;
	while (num & (num - 1))
	//每&一次去掉二进制最右边的1
	{
		count++;
	}
}

int binary_check(unsigned int num)
{
     int count = 0;
     while(num/2)
     {
        count++;
     }
}

practice6:
模拟实现qsoet
#include <stdio.h>
void my_qsort(void* base, size_t num, size_t width, int (*cmp)(const void* p1, const void* p2));

Swap(char* buf1, char* buf2,int width)
{
	int i = 0;
	for (i = 0; i < width; i++)
	{
		char tmp = *buf1;
		*buf1 = *buf2;
		*buf2 = tmp;
	}
}

int cmp(const void* p1,const void* p2)
{
	return *((int*)p1) - *((int*)p2);
}

void my_qsort(void* base, size_t num, size_t width,int (*cmp)(const void*p1,const void*p2))
{
	size_t i = 0;
	for (i = 0; i < num - 1;i++)
	{
		size_t j = 0;
		for (j = 0; j < num - 1 - i; j++)
		{
			if (cmp((char*)base + j * width, (char*)base + (j + 1) * width)>0)
			{
				Swap((char*)base + j * width, (char*)base + (j + 1) * width,width);
			}
		}
	}
}

int main()
{
	char arr[10] = "qwertyuio";
	int sz = sizeof(arr) / sizeof(arr[0]);
	my_qsort(arr, sz, sizeof(arr[0]), cmp);
	printf("%s", arr);
	return 0;
}

Practice7:
模拟实现memmove
void* my_memmove(void* dest, const void* src, size_t count)
{
	assert(dest && src);
	void* ret = dest;
	if (dest < src)
	{
		while (count--)
		{
			*(char*)dest = *(char*)src;
			dest = (char*)dest + 1;
			src = (char*)+1;
		}
	}
	else
	{
		while (count--)
		{
			*((char*)dest + count) = *((char*)src + count);
		}
	}
}
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	my_memmove(arr1, arr + 2, 20);
	return 0;
}
